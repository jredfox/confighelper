package net.minecraft.entity;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.jredfox.confighelper.Registries;

import net.minecraft.entity.monster.EntityCreeper;
import net.minecraft.item.ItemStack;
import net.minecraft.network.PacketBuffer;
import net.minecraft.util.ChunkCoordinates;

public class DataWatcher{
	
	private static final HashMap dataTypes = new HashMap();

	public DataWatcher(Entity entityCreeper) 
	{
		
	}

	public static void registerDataType(Class dataType, int id)
	{
		dataTypes.put(dataType, id);
	}

	/**
     * Writes a watchable object (entity attribute of type {byte, short, int, float, string, ItemStack,
     * ChunkCoordinates}) to the specified PacketBuffer
     */
    public static void writeWatchableObjectToPacketBuffer(PacketBuffer buf, DataWatcher.WatchableObject entry) throws IOException
    {
    	int type = entry.getObjectType();
        buf.writeByte(type);
        buf.writeVarIntToBuffer(entry.getDataValueId());

        switch (type)
        {
            case 0:
            	buf.writeByte(((Byte)entry.getObject()).byteValue());
                break;
            case 1:
            	buf.writeShort(((Short)entry.getObject()).shortValue());
                break;
            case 2:
            	buf.writeInt(((Integer)entry.getObject()).intValue());
                break;
            case 3:
            	buf.writeFloat(((Float)entry.getObject()).floatValue());
                break;
            case 4:
            	buf.writeStringToBuffer((String)entry.getObject());
                break;
            case 5:
                ItemStack itemstack = (ItemStack)entry.getObject();
                buf.writeItemStackToBuffer(itemstack);
                break;
            case 6:
                ChunkCoordinates chunkcoordinates = (ChunkCoordinates)entry.getObject();
                buf.writeInt(chunkcoordinates.posX);
                buf.writeInt(chunkcoordinates.posY);
                buf.writeInt(chunkcoordinates.posZ);
            break;
      
            default:
            	Registries.writeWatchableObject(buf, type, entry.getObject());
        }
    }


    /**
     * Reads a list of watched objects (entity attribute of type {byte, short, int, float, string, ItemStack,
     * ChunkCoordinates}) from the supplied PacketBuffer
     */
    public static List<DataWatcher.WatchableObject> readWatchedListFromPacketBuffer(PacketBuffer buf) throws IOException
    {
        List list = new ArrayList();
        int b;
        while ((b = buf.readUnsignedByte()) != 255)
        {
            int dataType = b;
            int id = buf.readVarIntFromBuffer();
            DataWatcher.WatchableObject watchableobject = null;

            switch (dataType)
            {
                case 0:
                    watchableobject = new DataWatcher.WatchableObject(dataType, id, Byte.valueOf(buf.readByte()));
                    break;
                case 1:
                    watchableobject = new DataWatcher.WatchableObject(dataType, id, Short.valueOf(buf.readShort()));
                    break;
                case 2:
                    watchableobject = new DataWatcher.WatchableObject(dataType, id, Integer.valueOf(buf.readInt()));
                    break;
                case 3:
                    watchableobject = new DataWatcher.WatchableObject(dataType, id, Float.valueOf(buf.readFloat()));
                    break;
                case 4:
                    watchableobject = new DataWatcher.WatchableObject(dataType, id, buf.readStringFromBuffer(32767));
                    break;
                case 5:
                    watchableobject = new DataWatcher.WatchableObject(dataType, id, buf.readItemStackFromBuffer());
                    break;
                case 6:
                    int k = buf.readInt();
                    int l = buf.readInt();
                    int i1 = buf.readInt();
                    watchableobject = new DataWatcher.WatchableObject(dataType, id, new ChunkCoordinates(k, l, i1));
                break;
                
                default:
                	watchableobject = new DataWatcher.WatchableObject(dataType, id, Registries.readWatchableObject(buf, dataType));
            }

            list.add(watchableobject);
        }

        return list.isEmpty() ? null : list;
    }
    
	public static class WatchableObject 
	{
        public WatchableObject(int p_i1603_1_, int p_i1603_2_, Object p_i1603_3_)
        {
        	
        }
        public int getObjectType()
        {
            return -1;
        }
		public int getDataValueId()
        {
           return -1;
        }
		public Object getObject() 
		{
			return null;
		}
	}
	
}